{
  "name": "kb-bindings",
  "version": "0.2.0",
  "description": "present a polling interface and events for keyboard state given a binding object",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/deathcap/kb-bindings.git"
  },
  "keywords": [
    "keyboard",
    "controls",
    "polling",
    "vkey",
    "bindings",
    "event"
  ],
  "author": {
    "name": "Chris Dickinson",
    "email": "chris@neversaw.us"
  },
  "license": "MIT",
  "dependencies": {
    "vkey": "~0.0.3",
    "ever": "~0.0.3"
  },
  "readme": "# kb-bindings\n\nExpose a polling object and edge-triggered events for (game) keybindings using [vkey](https://github.com/chrisdickinson/vkey/) definitions.\nCan be configured in a GUI using the [kb-bindings-ui](https://github.com/deathcap/kb-bindings-ui) module.\n\nBased on @chrisdickinson's [kb-controls](https://github.com/chrisdickinson/kb-controls) (should be mostly compatible)\n\n```javascript\nvar kb = require('./index')\n  , raf = require('raf')\n\nvar ctl = kb({\n  '<left>': 'strafe_left'\n, '<right>': 'strafe_right'\n, '<up>': 'forward'\n, '<down>': 'backward'\n, 'W': 'forward'\n, 'A': 'strafe_left'\n, 'S': 'backward'\n, 'D': 'strafe_right'\n, '<mouse 1>': 'fire'\n, 'E': 'inventory'\n})\n\nraf(document.body).on('data', function(dt) {\n  console.log(!!ctl.forward)\n})\n\n```\n\nSee the demo at [http://deathcap.github.io/kb-bindings-ui/](http://deathcap.github.io/kb-bindings-ui/)\n\n### Why both polling and events?\n\nThis module provides both a polling object and up/down events for each binding, so you\ncan use which ever is most convenient for your application (level-triggered or edge-triggered),\nall with a unified shared set of bindings.\n\n## API\n\n#### kb = require('kb-bindings')\n\nreturn the `kb` function.\n\n#### ctl = kb([DOMElement,] bindings[, augmentObject, opts])\n\nAdd event listeners to `DOMElement` or `document.body` if not provided.\n\nBindings is a map of `vkey`'s to desired property names:\n\n```javascript\n// bindings example\n{ 'X': 'do_something'\n, '<space>': 'jump'\n, '<control>': 'sprint' }\n\n// would yield the following ctl object (sans methods):\n{ 'do_something': 0\n, 'jump': 0\n, 'sprint': 0 }\n```\n\nIf `augmentObject` is passed, these property names will be attached to it instead\nof a new object.\n\nIf `opts` is passed, the following options are understood:\n\n* `preventDefaults`: if true (default), the default browser action for the DOM events will be prevented\n\n#### ctl[yourPropertyName] -> Number\n\nIf the number is truthy, that means it's actively being pressed. Otherwise it's not. If it's\ngreater than 1, then two different keys may have been bound to the action and are simultaneously being pressed.\n\n#### ctl.enable()\n\nEnables the keyup, keydown, mouseup, mousedown, and contextmenu listeners (and makes them `preventDefault()` if `preventDefaults` is set.)\n\n#### ctl.enabled() -> boolean\n\nReturns whether or not the `ctl` is enabled.\n\n#### ctl.disable()\n\nDisables the DOM listeners (without removing them). Keyboard and mouse events should work\nas normal while the `ctl` is disabled.\n\n#### ctl.destroy()\n\nRemoves all DOM event listeners and renders the `ctl` inert.\n\n#### ctl.down.on(binding, function(){})\n\nEmits when the binding state changes to down. Note this event is only emitted when the\nstate changes (unlike the DOM `keydown` event it does _not_ continuously emit as the key\nis held down).\n\nThe event name is the binding name, for example:\n\n    ctl.down.on('inventory', function() { ... });\n\n#### ctl.up.on(binding, function(){})\n\nEmits when the binding state changes to up.\n\n## License\n\nMIT\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/deathcap/kb-bindings/issues"
  },
  "homepage": "https://github.com/deathcap/kb-bindings",
  "_id": "kb-bindings@0.2.0",
  "dist": {
    "shasum": "8d58aaaba1227b73892ea7db84546b5a60b529d6"
  },
  "deprecated": "Deprecated in favor of kb-controls 0.2.0+ and voxel-keys",
  "_from": "kb-bindings@~0.2.0",
  "_resolved": "https://registry.npmjs.org/kb-bindings/-/kb-bindings-0.2.0.tgz"
}
